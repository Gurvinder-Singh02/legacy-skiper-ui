{
  "name": "theme-toggle-button",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "dependencies": [
    "next-themes"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { MoonIcon, SunIcon } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\n\nimport { Button } from \"@/components/ui/button\"\n\nimport {\n  AnimationStart,\n  AnimationVariant,\n  createAnimation,\n} from \"./theme-animations\"\n\ninterface ThemeToggleAnimationProps {\n  variant?: AnimationVariant\n  start?: AnimationStart\n  showLabel?: boolean\n  url?: string\n}\n\nexport default function ThemeToggleButton({\n  variant = \"circle-blur\",\n  start = \"top-left\",\n  showLabel = false,\n  url = \"\",\n}: ThemeToggleAnimationProps) {\n  const { theme, setTheme } = useTheme()\n\n  const styleId = \"theme-transition-styles\"\n\n  const updateStyles = React.useCallback((css: string, name: string) => {\n    if (typeof window === \"undefined\") return\n\n    let styleElement = document.getElementById(styleId) as HTMLStyleElement\n\n    console.log(\"style ELement\", styleElement)\n    console.log(\"name\", name)\n\n    if (!styleElement) {\n      styleElement = document.createElement(\"style\")\n      styleElement.id = styleId\n      document.head.appendChild(styleElement)\n    }\n\n    styleElement.textContent = css\n\n    console.log(\"content updated\")\n  }, [])\n\n  const toggleTheme = React.useCallback(() => {\n    const animation = createAnimation(variant, start, url)\n\n    updateStyles(animation.css, animation.name)\n\n    if (typeof window === \"undefined\") return\n\n    const switchTheme = () => {\n      setTheme(theme === \"light\" ? \"dark\" : \"light\")\n    }\n\n    //@ts-ignore\n    if (!document.startViewTransition) {\n      switchTheme()\n      return\n    }\n\n    //@ts-ignore\n    document.startViewTransition(switchTheme)\n  }, [theme, setTheme])\n\n  return (\n    <Button\n      onClick={toggleTheme}\n      variant=\"ghost\"\n      size=\"icon\"\n      className=\"w-9 p-0 h-9 relative group\"\n    >\n      <SunIcon className=\"size-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <MoonIcon className=\"absolute size-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      {showLabel && (\n        <>\n          <span className=\"hidden group-hover:block border rounded-full px-2 absolute -top-10\">\n            {\" \"}\n            variant = {variant}\n          </span>\n          <span className=\"hidden group-hover:block border rounded-full px-2 absolute -bottom-10\">\n            {\" \"}\n            start = {start}\n          </span>\n        </>\n      )}\n    </Button>\n  )\n}\n",
      "path": "ui/theme-toggle-button.tsx",
      "target": "components/ui/theme-toggle-button.tsx"
    },
    {
      "type": "registry:ui",
      "content": "// animations.ts\nexport type AnimationVariant = \"circle\" | \"circle-blur\" | \"polygon\" | \"gif\"\nexport type AnimationStart =\n  | \"top-left\"\n  | \"top-right\"\n  | \"bottom-left\"\n  | \"bottom-right\"\n  | \"center\"\n\ninterface Animation {\n  name: string\n  css: string\n}\n\nconst getPositionCoords = (position: AnimationStart) => {\n  switch (position) {\n    case \"top-left\":\n      return { cx: \"0\", cy: \"0\" }\n    case \"top-right\":\n      return { cx: \"40\", cy: \"0\" }\n    case \"bottom-left\":\n      return { cx: \"0\", cy: \"40\" }\n    case \"bottom-right\":\n      return { cx: \"40\", cy: \"40\" }\n  }\n}\n\nconst generateSVG = (variant: AnimationVariant, start: AnimationStart) => {\n  if (start === \"center\") return\n\n  const positionCoords = getPositionCoords(start)\n  if (!positionCoords) {\n    throw new Error(`Invalid start position: ${start}`)\n  }\n  const { cx, cy } = positionCoords\n\n  if (variant === \"circle\") {\n    return `data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 40 40\"><circle cx=\"${cx}\" cy=\"${cy}\" r=\"20\" fill=\"white\"/></svg>`\n  }\n\n  if (variant === \"circle-blur\") {\n    return `data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 40 40\"><defs><filter id=\"blur\"><feGaussianBlur stdDeviation=\"2\"/></filter></defs><circle cx=\"${cx}\" cy=\"${cy}\" r=\"18\" fill=\"white\" filter=\"url(%23blur)\"/></svg>`\n  }\n\n  return \"\"\n}\n\nconst getTransformOrigin = (start: AnimationStart) => {\n  switch (start) {\n    case \"top-left\":\n      return \"top left\"\n    case \"top-right\":\n      return \"top right\"\n    case \"bottom-left\":\n      return \"bottom left\"\n    case \"bottom-right\":\n      return \"bottom right\"\n  }\n}\n\nexport const createAnimation = (\n  variant: AnimationVariant,\n  start: AnimationStart,\n  url?: string\n): Animation => {\n  const svg = generateSVG(variant, start)\n  const transformOrigin = getTransformOrigin(start)\n\n  if (variant === \"polygon\") {\n    return {\n      name: `${variant}-${start}`,\n      css: `\n       ::view-transition-group(root) {\n        animation-duration: 0.7s;\n        animation-timing-function: var(--expo-out);\n      }\n            \n      ::view-transition-new(root) {\n        animation-name: reveal-light;\n      }\n\n      ::view-transition-old(root),\n      .dark::view-transition-old(root) {\n        animation: none;\n        z-index: -1;\n      }\n      .dark::view-transition-new(root) {\n        animation-name: reveal-dark;\n      }\n\n      @keyframes reveal-dark {\n        from {\n          clip-path: polygon(50% -71%, -50% 71%, -50% 71%, 50% -71%);\n        }\n        to {\n          clip-path: polygon(50% -71%, -50% 71%, 50% 171%, 171% 50%);\n        }\n      }\n\n      @keyframes reveal-light {\n        from {\n          clip-path: polygon(171% 50%, 50% 171%, 50% 171%, 171% 50%);\n        }\n        to {\n          clip-path: polygon(171% 50%, 50% 171%, -50% 71%, 50% -71%);\n        }\n      }\n      `,\n    }\n  }\n  if (variant === \"circle\" && start == \"center\") {\n    return {\n      name: `${variant}-${start}`,\n      css: `\n       ::view-transition-group(root) {\n        animation-duration: 0.7s;\n        animation-timing-function: var(--expo-out);\n      }\n            \n      ::view-transition-new(root) {\n        animation-name: reveal-light;\n      }\n\n      ::view-transition-old(root),\n      .dark::view-transition-old(root) {\n        animation: none;\n        z-index: -1;\n      }\n      .dark::view-transition-new(root) {\n        animation-name: reveal-dark;\n      }\n\n      @keyframes reveal-dark {\n        from {\n          clip-path: circle(0% at 50% 50%);\n        }\n        to {\n          clip-path: circle(100.0% at 50% 50%);\n        }\n      }\n\n      @keyframes reveal-light {\n        from {\n           clip-path: circle(0% at 50% 50%);\n        }\n        to {\n          clip-path: circle(100.0% at 50% 50%);\n        }\n      }\n      `,\n    }\n  }\n  if (variant === \"gif\") {\n    return {\n      name: `${variant}-${start}`,\n      css: `\n      ::view-transition-group(root) {\n  animation-timing-function: var(--expo-in);\n}\n\n::view-transition-new(root) {\n  mask: url('${url}') center / 0 no-repeat;\n  animation: scale 3s;\n}\n\n::view-transition-old(root),\n.dark::view-transition-old(root) {\n  animation: scale 3s;\n}\n\n@keyframes scale {\n  0% {\n    mask-size: 0;\n  }\n  10% {\n    mask-size: 50vmax;\n  }\n  90% {\n    mask-size: 50vmax;\n  }\n  100% {\n    mask-size: 2000vmax;\n  }\n}`,\n    }\n  }\n\n  return {\n    name: `${variant}-${start}`,\n    css: `\n      ::view-transition-group(root) {\n        animation-timing-function: var(--expo-out);\n      }\n      ::view-transition-new(root) {\n        mask: url('${svg}') ${start.replace(\"-\", \" \")} / 0 no-repeat;\n        mask-origin: content-box;\n        animation: scale-${start} 1s;\n        transform-origin: ${transformOrigin};\n      }\n      ::view-transition-old(root),\n      .dark::view-transition-old(root) {\n        animation: scale-${start} 1s;\n        transform-origin: ${transformOrigin};\n        z-index: -1;\n      }\n      @keyframes scale-${start} {\n        to {\n          mask-size: 350vmax;\n        }\n      }\n    `,\n  }\n}\n",
      "path": "ui/theme-animations.ts",
      "target": "components/ui/theme-animations.ts"
    },
    {
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\"\nimport { type ThemeProviderProps } from \"next-themes/dist/types\"\n\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>\n}\n",
      "path": "ui/theme-provider.tsx",
      "target": "components/ui/theme-provider.tsx"
    }
  ]
}