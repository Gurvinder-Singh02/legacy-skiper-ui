{
  "name": "hover-expand",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "name": "hover-expand.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useState } from \"react\"\nimport { AnimatePresence, motion } from \"framer-motion\"\n\ninterface HoverExpandProps {\n  images: string[]\n  initialSelectedIndex?: number\n  thumbnailHeight?: number\n  modalImageSize?: number\n  maxThumbnails?: number\n}\n\nexport default function HoverExpand({\n  images,\n  initialSelectedIndex = 0,\n  thumbnailHeight = 200,\n  modalImageSize = 400,\n  maxThumbnails = 11,\n}: HoverExpandProps) {\n  const [selectedIndex, setSelectedIndex] =\n    useState<number>(initialSelectedIndex)\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false)\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        setIsModalOpen(false)\n      }\n    }\n\n    if (isModalOpen) {\n      document.body.classList.add(\"overflow-hidden\")\n      document.addEventListener(\"keydown\", handleKeyDown)\n    } else {\n      document.body.classList.remove(\"overflow-hidden\")\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown)\n      document.body.classList.remove(\"overflow-hidden\")\n    }\n  }, [isModalOpen])\n\n  return (\n    <div className=\"relative\">\n      <div className=\"mx-auto flex w-fit  gap-1 rounded-md pb-20 pt-10 md:gap-2\">\n        {images.slice(0, maxThumbnails).map((imageUrl, i) => (\n          <div\n            key={`image-container-${i}`}\n            className={`group relative h-52 overflow-hidden rounded-2xl transition-all duration-300 ${\n              selectedIndex === i ? \"w-64\" : \"w-4 sm:w-5 md:w-8 xl:w-12\"\n            }`}\n            onMouseEnter={() => setSelectedIndex(i)}\n            onMouseLeave={() => setSelectedIndex(i)}\n            onClick={() => {\n              setSelectedIndex(i)\n              setIsModalOpen(true)\n            }}\n          >\n            <motion.div\n              layoutId={`image-${i}`}\n              className=\"absolute inset-0 size-full\"\n            >\n              <img\n                src={imageUrl}\n                alt={`Image ${i + 1}`}\n                className=\"size-full object-cover  transition-transform duration-300 \"\n              />\n            </motion.div>\n          </div>\n        ))}\n      </div>\n\n      <AnimatePresence>\n        {isModalOpen && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 z-50 grid place-content-center bg-white/40 backdrop-blur-sm dark:bg-black/40\"\n            onClick={() => setIsModalOpen(false)}\n          >\n            <div\n              onClick={(e: React.MouseEvent) => e.stopPropagation()}\n              className=\"cursor-pointer overflow-hidden rounded-2xl bg-black\"\n            >\n              <motion.div\n                layoutId={`image-${selectedIndex}`}\n                className=\"relative size-96\"\n              >\n                <img\n                  src={images[selectedIndex]}\n                  alt={`Image ${selectedIndex + 1}`}\n                  className=\"absolute left-1/2 top-1/2  size-full -translate-x-1/2 -translate-y-1/2 object-cover\"\n                />\n              </motion.div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  )\n}\n"
    }
  ],
  "type": "components:ui"
}