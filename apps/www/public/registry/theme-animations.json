{
  "name": "theme-animations",
  "type": "registry:ui",
  "dependencies": [
    "next-themes"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "// animations.ts\nexport type AnimationVariant = \"circle\" | \"circle-blur\" | \"polygon\" | \"gif\"\nexport type AnimationStart =\n  | \"top-left\"\n  | \"top-right\"\n  | \"bottom-left\"\n  | \"bottom-right\"\n  | \"center\"\n\ninterface Animation {\n  name: string\n  css: string\n}\n\nconst getPositionCoords = (position: AnimationStart) => {\n  switch (position) {\n    case \"top-left\":\n      return { cx: \"0\", cy: \"0\" }\n    case \"top-right\":\n      return { cx: \"40\", cy: \"0\" }\n    case \"bottom-left\":\n      return { cx: \"0\", cy: \"40\" }\n    case \"bottom-right\":\n      return { cx: \"40\", cy: \"40\" }\n  }\n}\n\nconst generateSVG = (variant: AnimationVariant, start: AnimationStart) => {\n  if (start === \"center\") return\n\n  const positionCoords = getPositionCoords(start)\n  if (!positionCoords) {\n    throw new Error(`Invalid start position: ${start}`)\n  }\n  const { cx, cy } = positionCoords\n\n  if (variant === \"circle\") {\n    return `data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 40 40\"><circle cx=\"${cx}\" cy=\"${cy}\" r=\"20\" fill=\"white\"/></svg>`\n  }\n\n  if (variant === \"circle-blur\") {\n    return `data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 40 40\"><defs><filter id=\"blur\"><feGaussianBlur stdDeviation=\"2\"/></filter></defs><circle cx=\"${cx}\" cy=\"${cy}\" r=\"18\" fill=\"white\" filter=\"url(%23blur)\"/></svg>`\n  }\n\n  return \"\"\n}\n\nconst getTransformOrigin = (start: AnimationStart) => {\n  switch (start) {\n    case \"top-left\":\n      return \"top left\"\n    case \"top-right\":\n      return \"top right\"\n    case \"bottom-left\":\n      return \"bottom left\"\n    case \"bottom-right\":\n      return \"bottom right\"\n  }\n}\n\nexport const createAnimation = (\n  variant: AnimationVariant,\n  start: AnimationStart,\n  url?: string\n): Animation => {\n  const svg = generateSVG(variant, start)\n  const transformOrigin = getTransformOrigin(start)\n\n  if (variant === \"polygon\") {\n    return {\n      name: `${variant}-${start}`,\n      css: `\n       ::view-transition-group(root) {\n        animation-duration: 0.7s;\n        animation-timing-function: var(--expo-out);\n      }\n            \n      ::view-transition-new(root) {\n        animation-name: reveal-light;\n      }\n\n      ::view-transition-old(root),\n      .dark::view-transition-old(root) {\n        animation: none;\n        z-index: -1;\n      }\n      .dark::view-transition-new(root) {\n        animation-name: reveal-dark;\n      }\n\n      @keyframes reveal-dark {\n        from {\n          clip-path: polygon(50% -71%, -50% 71%, -50% 71%, 50% -71%);\n        }\n        to {\n          clip-path: polygon(50% -71%, -50% 71%, 50% 171%, 171% 50%);\n        }\n      }\n\n      @keyframes reveal-light {\n        from {\n          clip-path: polygon(171% 50%, 50% 171%, 50% 171%, 171% 50%);\n        }\n        to {\n          clip-path: polygon(171% 50%, 50% 171%, -50% 71%, 50% -71%);\n        }\n      }\n      `,\n    }\n  }\n  if (variant === \"circle\" && start == \"center\") {\n    return {\n      name: `${variant}-${start}`,\n      css: `\n       ::view-transition-group(root) {\n        animation-duration: 0.7s;\n        animation-timing-function: var(--expo-out);\n      }\n            \n      ::view-transition-new(root) {\n        animation-name: reveal-light;\n      }\n\n      ::view-transition-old(root),\n      .dark::view-transition-old(root) {\n        animation: none;\n        z-index: -1;\n      }\n      .dark::view-transition-new(root) {\n        animation-name: reveal-dark;\n      }\n\n      @keyframes reveal-dark {\n        from {\n          clip-path: circle(0% at 50% 50%);\n        }\n        to {\n          clip-path: circle(100.0% at 50% 50%);\n        }\n      }\n\n      @keyframes reveal-light {\n        from {\n           clip-path: circle(0% at 50% 50%);\n        }\n        to {\n          clip-path: circle(100.0% at 50% 50%);\n        }\n      }\n      `,\n    }\n  }\n  if (variant === \"gif\") {\n    return {\n      name: `${variant}-${start}`,\n      css: `\n      ::view-transition-group(root) {\n  animation-timing-function: var(--expo-in);\n}\n\n::view-transition-new(root) {\n  mask: url('${url}') center / 0 no-repeat;\n  animation: scale 3s;\n}\n\n::view-transition-old(root),\n.dark::view-transition-old(root) {\n  animation: scale 3s;\n}\n\n@keyframes scale {\n  0% {\n    mask-size: 0;\n  }\n  10% {\n    mask-size: 50vmax;\n  }\n  90% {\n    mask-size: 50vmax;\n  }\n  100% {\n    mask-size: 2000vmax;\n  }\n}`,\n    }\n  }\n\n  return {\n    name: `${variant}-${start}`,\n    css: `\n      ::view-transition-group(root) {\n        animation-timing-function: var(--expo-out);\n      }\n      ::view-transition-new(root) {\n        mask: url('${svg}') ${start.replace(\"-\", \" \")} / 0 no-repeat;\n        mask-origin: content-box;\n        animation: scale-${start} 1s;\n        transform-origin: ${transformOrigin};\n      }\n      ::view-transition-old(root),\n      .dark::view-transition-old(root) {\n        animation: scale-${start} 1s;\n        transform-origin: ${transformOrigin};\n        z-index: -1;\n      }\n      @keyframes scale-${start} {\n        to {\n          mask-size: 350vmax;\n        }\n      }\n    `,\n  }\n}\n",
      "path": "ui/theme-animations.ts",
      "target": "components/ui/theme-animations.ts"
    }
  ]
}