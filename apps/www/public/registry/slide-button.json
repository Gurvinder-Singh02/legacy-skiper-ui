{
  "name": "slide-button",
  "type": "registry:ui",
  "registryDependencies": [
    "button"
  ],
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport React, {\n  forwardRef,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n  type JSX,\n} from \"react\"\nimport {\n  AnimatePresence,\n  motion,\n  useMotionValue,\n  useSpring,\n  useTransform,\n  type PanInfo,\n} from \"framer-motion\"\nimport { Check, Loader2, SendHorizontal, X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, ButtonProps } from \"@/components/ui/button\"\n\nconst DRAG_CONSTRAINTS = { left: 0, right: 155 }\nconst DRAG_THRESHOLD = 0.9\n\nconst BUTTON_STATES = {\n  initial: { width: \"12rem\" },\n  completed: { width: \"8rem\" },\n}\n\nconst ANIMATION_CONFIG = {\n  spring: {\n    type: \"spring\",\n    stiffness: 400,\n    damping: 40,\n    mass: 0.8,\n  },\n}\n\ntype StatusIconProps = {\n  status: string\n}\n\nconst StatusIcon: React.FC<StatusIconProps> = ({ status }) => {\n  const iconMap: Record<StatusIconProps[\"status\"], JSX.Element> = useMemo(\n    () => ({\n      loading: <Loader2 className=\"animate-spin\" size={20} />,\n      success: <Check size={20} />,\n      error: <X size={20} />,\n    }),\n    []\n  )\n\n  if (!iconMap[status]) return null\n\n  return (\n    <motion.div\n      key={crypto.randomUUID()}\n      initial={{ opacity: 0, scale: 0.5 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0 }}\n    >\n      {iconMap[status]}\n    </motion.div>\n  )\n}\n\nconst useButtonStatus = (resolveTo: \"success\" | \"error\") => {\n  const [status, setStatus] = useState<\n    \"idle\" | \"loading\" | \"success\" | \"error\"\n  >(\"idle\")\n\n  const handleSubmit = useCallback(() => {\n    setStatus(\"loading\")\n    setTimeout(() => {\n      setStatus(resolveTo)\n    }, 2000)\n  }, [resolveTo])\n\n  return { status, handleSubmit }\n}\n\nconst SlideButton = forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, ...props }, ref) => {\n    const [isDragging, setIsDragging] = useState(false)\n    const [completed, setCompleted] = useState(false)\n    const dragHandleRef = useRef<HTMLDivElement | null>(null)\n    const { status, handleSubmit } = useButtonStatus(\"success\")\n\n    const dragX = useMotionValue(0)\n    const springX = useSpring(dragX, ANIMATION_CONFIG.spring)\n    const dragProgress = useTransform(\n      springX,\n      [0, DRAG_CONSTRAINTS.right],\n      [0, 1]\n    )\n\n    const handleDragStart = useCallback(() => {\n      if (completed) return\n      setIsDragging(true)\n    }, [completed])\n\n    const handleDragEnd = () => {\n      if (completed) return\n      setIsDragging(false)\n\n      const progress = dragProgress.get()\n      if (progress >= DRAG_THRESHOLD) {\n        setCompleted(true)\n        handleSubmit()\n      } else {\n        dragX.set(0)\n      }\n    }\n\n    const handleDrag = (\n      _event: MouseEvent | TouchEvent | PointerEvent,\n      info: PanInfo\n    ) => {\n      if (completed) return\n      const newX = Math.max(0, Math.min(info.offset.x, DRAG_CONSTRAINTS.right))\n      dragX.set(newX)\n    }\n\n    const adjustedWidth = useTransform(springX, (x) => x + 10)\n\n    return (\n      <motion.div\n        animate={completed ? BUTTON_STATES.completed : BUTTON_STATES.initial}\n        transition={ANIMATION_CONFIG.spring}\n        className=\"shadow-button-inset dark:shadow-button-inset-dark relative flex h-9 items-center justify-center rounded-full bg-gray-100\"\n      >\n        {!completed && (\n          <motion.div\n            style={{\n              width: adjustedWidth,\n            }}\n            className=\"absolute inset-y-0 left-0 z-0 rounded-full bg-accent\"\n          />\n        )}\n        <AnimatePresence key={crypto.randomUUID()}>\n          {!completed && (\n            <motion.div\n              ref={dragHandleRef}\n              drag=\"x\"\n              dragConstraints={DRAG_CONSTRAINTS}\n              dragElastic={0.05}\n              dragMomentum={false}\n              onDragStart={handleDragStart}\n              onDragEnd={handleDragEnd}\n              onDrag={handleDrag}\n              style={{ x: springX }}\n              className=\"absolute -left-4 z-10 flex cursor-grab items-center justify-start active:cursor-grabbing\"\n            >\n              <Button\n                ref={ref}\n                disabled={status === \"loading\"}\n                {...props}\n                size=\"icon\"\n                className={cn(\n                  \"shadow-button rounded-full drop-shadow-xl\",\n                  isDragging && \"scale-105 transition-transform\",\n                  className\n                )}\n              >\n                <SendHorizontal className=\"size-4\" />\n              </Button>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        <AnimatePresence key={crypto.randomUUID()}>\n          {completed && (\n            <motion.div\n              className=\"absolute inset-0 flex items-center justify-center\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n            >\n              <Button\n                ref={ref}\n                disabled={status === \"loading\"}\n                {...props}\n                className={cn(\n                  \"size-full rounded-full transition-all duration-300\",\n                  className\n                )}\n              >\n                <AnimatePresence key={crypto.randomUUID()} mode=\"wait\">\n                  <StatusIcon status={status} />\n                </AnimatePresence>\n              </Button>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.div>\n    )\n  }\n)\n\nSlideButton.displayName = \"SlideButton\"\n\nexport default SlideButton\n",
      "path": "ui/slide-button.tsx",
      "target": "components/ui/slide-button.tsx"
    }
  ]
}