{
  "name": "skiper-card",
  "type": "registry:ui",
  "registryDependencies": [
    "badge"
  ],
  "dependencies": [
    "motion",
    "react-wrap-balancer"
  ],
  "files": [
    {
      "type": "registry:ui",
      "content": "\"use client\"\n\nimport { useEffect, useState, type MouseEvent } from \"react\"\nimport Image, { type StaticImageData } from \"next/image\"\nimport {\n  motion,\n  useMotionTemplate,\n  useMotionValue,\n  type MotionStyle,\n  type MotionValue,\n} from \"motion/react\"\nimport Balancer from \"react-wrap-balancer\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype WrapperStyle = MotionStyle & {\n  \"--x\": MotionValue<string>\n  \"--y\": MotionValue<string>\n}\n\ninterface CardProps {\n  title: string\n  description: string\n  bgClass?: string\n}\n\nfunction FeatureCard({\n  title,\n  description,\n  bgClass,\n  children,\n}: CardProps & {\n  children: React.ReactNode\n}) {\n  const [mounted, setMounted] = useState(false)\n  const mouseX = useMotionValue(0)\n  const mouseY = useMotionValue(0)\n  const isMobile = useIsMobile()\n\n  function handleMouseMove({ currentTarget, clientX, clientY }: MouseEvent) {\n    if (isMobile) return\n    const { left, top } = currentTarget.getBoundingClientRect()\n    mouseX.set(clientX - left)\n    mouseY.set(clientY - top)\n  }\n\n  useEffect(() => {\n    setMounted(true)\n  }, [])\n\n  return (\n    <motion.div\n      className=\"animated-cards relative w-full rounded-[16px]    \"\n      onMouseMove={handleMouseMove}\n      style={\n        {\n          \"--x\": useMotionTemplate`${mouseX}px`,\n          \"--y\": useMotionTemplate`${mouseY}px`,\n        } as WrapperStyle\n      }\n    >\n      <div\n        className={cn(\n          \"group relative w-full overflow-hidden rounded-3xl border border-black/10  bg-gradient-to-b from-neutral-900/90 to-stone-800 transition duration-300 dark:from-neutral-950/90 dark:to-neutral-800/90\",\n          \"md:hover:border-transparent\",\n          bgClass\n        )}\n      >\n        <div className=\"m-10 min-h-[550px] w-full\">\n          <div className=\"flex w-4/6 flex-col gap-3\">\n            <h2 className=\"text-xl font-bold tracking-tight text-white md:text-2xl\">\n              {title}\n            </h2>\n            <p className=\"text-sm leading-5 text-neutral-300 dark:text-zinc-400 sm:text-base sm:leading-5\">\n              <Balancer>{description}</Balancer>\n            </p>\n          </div>\n          {mounted ? children : null}\n        </div>\n      </div>\n    </motion.div>\n  )\n}\n\nconst steps = [\n  { id: \"1\", name: \"\" },\n  { id: \"2\", name: \"\" },\n  { id: \"3\", name: \"\" },\n]\n\nexport function SkiperCard({\n  image,\n  step1img1Class,\n  step1img2Class,\n  step2img1Class,\n  step2img2Class,\n  step3imgClass,\n  ...props\n}: CardProps & {\n  step1img1Class?: string\n  step1img2Class?: string\n  step2img1Class?: string\n  step2img2Class?: string\n  step3imgClass?: string\n  image: {\n    step1dark1: StaticImageData\n    step1dark2: StaticImageData\n    step1light1: StaticImageData\n    step1light2: StaticImageData\n    step2dark1: StaticImageData\n    step2dark2: StaticImageData\n    step2light1: StaticImageData\n    step2light2: StaticImageData\n    step3dark: StaticImageData\n    step3light: StaticImageData\n    step4light: StaticImageData\n    alt: string\n  }\n}) {\n  const { currentNumber: step, increment } = useNumberCycler()\n\n  return (\n    <FeatureCard {...props}>\n      <div\n        className={cn(\n          { \"translate-x-0 opacity-0\": step < 3 },\n          \"absolute left-2/4 top-1/3 flex w-full -translate-x-1/2 -translate-y-[33%] flex-col gap-12 text-center text-2xl font-bold transition-all duration-500 md:w-3/5 \"\n        )}\n      >\n        <Image\n          alt={image.alt}\n          className=\"pointer-events-none top-1/2 w-[90%] overflow-hidden rounded-2xl border border-neutral-100/10 transition-all duration-500 dark:border-zinc-700 md:left-[35px] md:top-[30%] md:w-full\"\n          src=\"https://res.cloudinary.com/di6xkdtqb/image/upload/v1736327775/Portfolio/eqpmyom7igqente5jrdi.png\"\n          width={800}\n          height={300}\n          style={{\n            position: \"absolute\",\n            userSelect: \"none\",\n            maxWidth: \"unset\",\n          }}\n        />\n      </div>\n\n      <>\n        {/* step 1 */}\n        <Image\n          alt={image.alt}\n          className={cn(step1img1Class, {\n            \"-translate-x-36 opacity-0 rounded-2xl\": step > 0,\n          })}\n          src={image.step1light1}\n          style={{\n            position: \"absolute\",\n            userSelect: \"none\",\n            maxWidth: \"unset\",\n          }}\n        />\n        <Image\n          alt={image.alt}\n          className={cn(step1img2Class, {\n            \"-translate-x-24 opacity-0 rounded-2xl\": step > 0,\n          })}\n          src={image.step1light2}\n          style={{\n            position: \"absolute\",\n            userSelect: \"none\",\n            maxWidth: \"unset\",\n          }}\n        />\n\n        {/* step 2 */}\n        <Image\n          alt={image.alt}\n          className={cn(\n            step2img1Class,\n            \"rounded-2xl\",\n            { \"translate-x-36 opacity-0\": step < 1 },\n            { \"-translate-x-36 opacity-0\": step > 1 }\n          )}\n          src={image.step2light1}\n          style={{\n            position: \"absolute\",\n            userSelect: \"none\",\n            maxWidth: \"unset\",\n          }}\n        />\n        <Image\n          alt={image.alt}\n          className={cn(\n            step2img2Class,\n            \"rounded-2xl \",\n            { \"translate-x-24 opacity-0\": step < 1 },\n            { \"-translate-x-24 opacity-0\": step > 1 }\n          )}\n          src={image.step2light2}\n          style={{\n            position: \"absolute\",\n            userSelect: \"none\",\n            maxWidth: \"unset\",\n          }}\n        />\n        {/* step 3 */}\n        <Image\n          alt={image.alt}\n          className={cn(\n            step3imgClass,\n            \"rounded-2xl\",\n            { \"translate-x-36 opacity-0\": step < 2 },\n            { \"-translate-x-36 opacity-0\": step > 2 },\n            { \"opacity-90\": step === 2 }\n          )}\n          src={image.step3light}\n          style={{\n            position: \"absolute\",\n            userSelect: \"none\",\n            maxWidth: \"unset\",\n          }}\n        />\n        <div className=\"absolute left-48 top-5 z-50 size-full cursor-pointer md:left-0\">\n          <Steps current={step} onChange={() => {}} steps={steps} />\n        </div>\n      </>\n\n      <div\n        className=\"absolute right-0 top-0 z-50 size-full cursor-pointer md:left-0\"\n        onClick={() => increment()}\n      />\n    </FeatureCard>\n  )\n}\n\nfunction IconCheck({ className, ...props }: React.ComponentProps<\"svg\">) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 256 256\"\n      fill=\"currentColor\"\n      className={cn(\"size-4\", className)}\n      {...props}\n    >\n      <path d=\"m229.66 77.66-128 128a8 8 0 0 1-11.32 0l-56-56a8 8 0 0 1 11.32-11.32L96 188.69 218.34 66.34a8 8 0 0 1 11.32 11.32Z\" />\n    </svg>\n  )\n}\n\ninterface StepsProps {\n  steps: { id: string; name: string }[]\n  current: number\n  onChange: (stepIdx: number) => void\n}\n\nexport function Steps({ steps, current, onChange }: StepsProps) {\n  return (\n    <nav aria-label=\"Progress\" className=\"flex justify-center px-4 \">\n      <ol\n        className=\"flex w-full flex-wrap items-start justify-start gap-2  sm:justify-center md:w-10/12 md:divide-y-0\"\n        role=\"list\"\n      >\n        {steps.map((step, stepIdx) => {\n          const isCompleted = current > stepIdx\n          const isCurrent = current === stepIdx\n          const isFuture = !isCompleted && !isCurrent\n          return (\n            <li\n              className={cn(\n                \"relative z-50 rounded-full px-3 py-1  transition-all duration-300 ease-in-out md:flex\",\n                isCompleted ? \"bg-neutral-500/20\" : \"bg-neutral-500/10\"\n              )}\n              key={`${step.name}-${stepIdx}`}\n            >\n              <div\n                className={cn(\n                  \"group flex w-full cursor-pointer items-center focus:outline-none  focus-visible:ring-2\",\n                  (isFuture || isCurrent) && \"pointer-events-none\"\n                )}\n                onClick={() => onChange(stepIdx)}\n              >\n                <span className=\"flex items-center gap-2 text-sm font-medium\">\n                  <span\n                    className={cn(\n                      \"flex shrink-0 items-center justify-center rounded-full duration-300\",\n                      isCompleted &&\n                        \"bg-brand-400 dark:bg-brand-400 size-4 text-white\",\n                      isCurrent &&\n                        \"bg-brand-300/80 size-4 p-2 text-neutral-400 dark:bg-neutral-500/50\",\n                      isFuture &&\n                        \"bg-brand-300/10 size-4 p-2 dark:bg-neutral-500/20\"\n                    )}\n                  >\n                    {isCompleted ? (\n                      <IconCheck className=\"size-3 stroke-white stroke-[3] text-white dark:stroke-black\" />\n                    ) : (\n                      <span\n                        className={cn(\n                          \"text-xs\",\n                          !isCurrent && \"text-[#C6EA7E]\"\n                        )}\n                      >\n                        {stepIdx + 1}\n                      </span>\n                    )}\n                  </span>\n                  <span\n                    className={cn(\n                      \"text-sm font-medium duration-300\",\n                      isCompleted && \"text-brand-400 dark:text-brand-500\",\n                      isFuture && \"text-neutral-500\"\n                    )}\n                  >\n                    {step.name}\n                  </span>\n                </span>\n              </div>\n            </li>\n          )\n        })}\n      </ol>\n    </nav>\n  )\n}\n\nfunction useNumberCycler() {\n  const [currentNumber, setCurrentNumber] = useState(0)\n  const [dummy, setDummy] = useState(0)\n\n  const increment = () => {\n    setCurrentNumber((prevNumber) => {\n      return (prevNumber + 1) % 4\n    })\n\n    setDummy((prev) => prev + 1)\n  }\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentNumber((prevNumber) => {\n        return (prevNumber + 1) % 4\n      })\n    }, 3000)\n\n    return () => {\n      clearInterval(intervalId)\n    }\n  }, [dummy])\n\n  return {\n    increment,\n    currentNumber,\n  }\n}\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = useState(false)\n\n  useEffect(() => {\n    const userAgent = navigator.userAgent\n    const isSmall = window.matchMedia(\"(max-width: 768px)\").matches\n    const isMobile = Boolean(\n      /Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i.exec(\n        userAgent\n      )\n    )\n\n    const isDev = process.env.NODE_ENV !== \"production\"\n    if (isDev) setIsMobile(isSmall || isMobile)\n\n    setIsMobile(isSmall && isMobile)\n  }, [])\n\n  return isMobile\n}\n",
      "path": "ui/skiper-card.tsx",
      "target": "components/ui/skiper-card.tsx"
    }
  ]
}